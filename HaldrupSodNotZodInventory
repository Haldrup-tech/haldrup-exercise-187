//AUTHOR:[Garrett Haldrup]
//COURSE:CPT187
//PURPOSE:[Creates random prize. Imports the file with list of items, and imports the file with the list of orders. Assigns Values from files to arrays.]
//STARTDATE:[2/18/2021]

package edu.cpt187.haldrup.exercise6;

import java.util.Random;

import java.io.FileInputStream;

import java.io.IOException;

import java.util.Scanner;


public class Inventory 
{
	
	//Constants
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};	
	private final double[] DISCOUNT_RATES = {0.15, 0.25, 0.0};
	private final String[] PRIZE_NAMES = {"Free Pencil", "Free Eraser", "Free Stapler"};
	private final int MAX_RECORDS = 35;
	private final int NOT_FOUND = -1;
	private final int ONE = 1;
	private final  int RESET_VALUE = 0;
	
	//Variables
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantites = new int[MAX_RECORDS];
	private double[] orderTotals = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex = 0;
	private int recordCount =  0;
	private Random prizeGenerator = new Random();
	
	public Inventory()
	{
		
	}//END OF Inventory
	
	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
	}//END OF setReduceStock
	
	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		
		try
		{
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));
			
			while (infile.hasNext() == true && recordCount < MAX_RECORDS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount ++;
			}//END OF while (infile.hasNext() == true && recordCount < MAX_RECORDS);
			
			infile.close();
			setBubbleSort();
		}//END OF try
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//END OF catch
	}//END OF setLoadItems
	
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		recordCount = RESET_VALUE;
		
		try
		{
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));
			
	
			while (infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				orderQuantites[recordCount] = infile.nextInt();
				orderTotals[recordCount] = infile.nextDouble();
				recordCount ++;
			}//END OF while (infile.hasNext() == true && recordCount < MAX_RECORDS);
			
			infile.close();
			setBubbleSort();
		}//END OF try
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//END OF catch
	}//END OF setLoadItems
	
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getSearchResults(borrowedID);
	}//END OF setSearchIndex
	
	public void setBubbleSort()
	{
		int localLast = 0;
		int localIndex = 0;
		boolean localSwap = false;
		
		localLast = recordCount - ONE;
		
		while (localLast > RESET_VALUE)
		{
			localIndex = RESET_VALUE;
			localSwap = false;
			while (localIndex < localLast)
			{
				if (itemIDs[localIndex] > itemIDs[localIndex + ONE])
				{
					setSwapArrayElements(localIndex);
					localSwap = true;
				}//END OF if (itemIDs[localIndex] > itemIDs[localIndex + ONE])
				localIndex++;
			}//END OF while (localIndex < localLast)
			if (localSwap == false)
			{
				localLast = RESET_VALUE;
			}//END OF if (localSwap == false)
			else
			{
			localLast--;
			}//END OF else
		}//END OF while (localLast > RESET_VALUE)
	}//END OF setBubbleSort
	
	public void setSwapArrayElements(int borrowedIndex)
	{
		int localItemID = 0;
		String localItemName = "";
		double localItemPrice = 0.0;
		int localItemStock = 0;
		
		localItemID = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + ONE];
		itemIDs[borrowedIndex + ONE] = localItemID;
		
		localItemName = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex + ONE];
		itemNames[borrowedIndex + ONE] = localItemName;
		
		localItemPrice = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex + ONE];
		itemPrices[borrowedIndex + ONE] = localItemPrice;
		
		localItemStock = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + ONE];
		inStockCounts[borrowedIndex + ONE] = localItemStock;
		
	}//END OF setSwapArrayElements
	
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}//END OF getInStockCounts
	
	public int[] getItemIDs()
	{
		return itemIDs;
	}//END OF getItemIDs
	
	public String[] getItemNames()
	{
		return itemNames;
	}//END OF getItemNames
	
	public double[] getItemPrices()
	{
		return itemPrices;
	}//END OF getItemPrices
	
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}//END OF getDiscountNames
	
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}//END OF getDiscountRate
	
	public int[] getOrderQuantites()
	{
		return orderQuantites;
	}//END OF getOrderQuantites
	
	public double[] getOrderTotals()
	{
		return orderTotals;
	}//END OF getOrderTotals
	
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}//END OF getPrizeNames
	
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}//END OF getRandomNumber
	
	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}//END OF getMaxRecords
	
	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}//END OF getItemSearchIndex
	
	public int getRecordCount()
	{
		return recordCount;
	}//END OF getRecordCount
	
	public double getGrandTotal()
	{
		
		double localGrandTotal = 0;
		int localIndex = 0;
		
		localGrandTotal = orderTotals[localIndex] + orderTotals[localIndex + ONE];
		localIndex++;
		localIndex++;
		
		while (localIndex < orderTotals.length)
		{
			localGrandTotal = localGrandTotal + orderTotals[localIndex];
			localIndex++;
		}//END OF while (localIndex < orderQuantities.length)
		
		
		return localGrandTotal;
	}//END OF getGrandTotal
	
	public int getSearchResults(int borrowedBorrowedTargetID)
	{
		int localLast = 0;
		int localFirst = 0;
		boolean localFound = false; 
		int localMid = 0;
		
		localLast = recordCount - ONE;
		
		while (localFirst <= localLast && localFound == false)
		{
			localMid = ((localFirst + localLast)/2);
			
			if (itemIDs[localMid] == borrowedBorrowedTargetID)
			{
				localFound = true;
			}//END OF if (itemIDs[localMid] == borrowedBorrowedTargetID)
			else if (itemIDs[localMid] < borrowedBorrowedTargetID)
			{
				localFirst = localMid + ONE;
			}
			else
			{
				localLast = localMid - ONE;
			}//END OF else
		}//END OF while (localFirst <= localLast && localFound == false)
		if (localFound == false)
		{
			localMid = NOT_FOUND;
		}//END OF if (localFound == false)
		return localMid;
		
	}//END OF getSearchResults
	
}//END OF Class Inventory

