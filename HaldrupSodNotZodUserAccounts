//AUTHOR:[Garrett Haldrup]
//COURSE:CPT187
//PURPOSE:[Adds the users username and password to list. Reads that list.]
//STARTDATE:[2/18/2021]

package edu.cpt187.haldrup.exercise6;

import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class UserAccounts {
	//Constants
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private final int MAXIMUM_RECORDS = 50;
	
	//Variables
	private String[] userNames = new String[MAXIMUM_RECORDS];
	private String[] passwords = new String[MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;
	
	public UserAccounts(String borrowedFileName)
	{
		masterFileName = borrowedFileName;
	}//END OF UserAccounts
	
	public void setUserAccountArrays()
	{
recordCount = RESET_VALUE;
		
		try
		{
			Scanner infile = new Scanner (new FileInputStream(masterFileName));
			
			while (infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{
				userNames[recordCount] = infile.next();
				passwords[recordCount] = infile.next();
				recordCount ++;
			}//END OF while (infile.hasNext() == true && recordCount < MAX_RECORDS);
			
			infile.close();
		}//END OF try
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}//END OF catch
	}//END OF setUserAccountArrays
	
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
	}//END OF setSearchedIndex
	
	public void setSearchedIndex(String borrowedUserName, String borrowedPassword)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
		
		if (searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
		{
			searchedIndex = NOT_FOUND;
		}//END OF if (searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
	}//END OF setSearchedIndex 2
	
	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword)
	{
		try
		{
			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName,true));
			
			filePW.printf("%s\t%s\n", borrowedUserName, borrowedPassword);
			
			recordCount++;
			
			filePW.close();
		}//END OF try
		catch (IOException ex)
		{
			
		}//END OF catch
	}//END OF setWriteOneRecord
	
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex = 0;
		int localFound = NOT_FOUND;
		
		while (localIndex < recordCount)
		{
			if (borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex]))		
			{
				localFound = localIndex;
				localIndex = recordCount;
			}//END OF if (borrowedBorrowedSubject.equalsIgnoreCase(printSubjects[localIndex]))
			else
			{
				localIndex++;
			}//END OF else
		}//END OF while (localIndex < recordCount)
		return localFound;
	}//END OF getSeqSearch
	
	public boolean getPasswordMatch(String borrowedBorrowedPassword)
	{
		
		boolean localFound = false;
		
		if (borrowedBorrowedPassword.equals(passwords[searchedIndex]))
		{
			localFound = true;
		}//END OF if (borrowedBorrowedPassword.equals(passwords[localIndex]))

		return localFound;
	}//END OF getPasswordMatch
	
	public String getFileName()
	{
		return masterFileName;
	}//END OF getFileName
	
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	}//END OF getMaximumRecords
	
	public int getRecordCount()
	{
		return recordCount;
	}//END OF getRecordCount
	
	public int getSearchedIndex()
	{
		return searchedIndex;
	}//END OF getSearchedIndex
			
}//END OF class UserAccounts
