//AUTHOR:[Garrett Haldrup]
//COURSE:CPT187
//PURPOSE:[The User can create an account, or login in to the software. The User can import a file then add to an order from those selections. Can also select what discont they have]
//STARTDATE:[2/18/2021]

package edu.cpt187.haldrup.exercise6;

import java.util.Scanner;



public class MainClass 
{
	
	//Main Class Constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	
	public static void main(String[] args)
	{
		String userName = "";
		char menuSelection = ' ';
		Scanner input = new Scanner(System.in); //Starts Scanner
		Order currentOrder = new Order();
		
		Inventory currentInventory = new Inventory();
		
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		
		displayWelcomeBanner();
		
		menuSelection = validateMainSelection(input);
		//Run while loop
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			
			userName = getUserName(input);
			
			if (menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//END OF if (currentUser.getSearchedIndex() >= 0)
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					
					displayAccountResults();
				}//END OF else
			}//END OF if (menuSelection == 'A')
			else 
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//END OF if (currentUser.getSearchedIndex() < 0)
				else
				{
					menuSelection = validateFileSelection(input);
					
					while (menuSelection != 'R')
					{
						if (menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//END OF else
						}//END OF if (menuSelection == 'A')
						else 
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							
							if (currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//END OF if (currentInventory.getItemSearchIndex() < 0)
							else 
							{
								currentOrder.setlastItemSelectedIndex(currentInventory.getItemSearchIndex());
								
								currentOrder.setItemID(currentInventory.getItemIDs());
								
								currentOrder.setItemName(currentInventory.getItemNames());
								
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								
								currentOrder.setHowMany(validateHowMany(input));
								
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//END OF if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								else 
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									
									currentOrder.setDecreaseInStock(currentInventory);
									
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									
									if (currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END OF if (currentOrder.getDiscountRate() > 0.0)
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//END OF else
								}//END OF else
							}//END OF else
						}//END OF else
						menuSelection = validateFileSelection(input);
					}//END OF while (menuSelection != 'R')
				}//END OF else
			}//END OF else
			menuSelection = validateMainSelection(input);
		}//END OF while (menuSelection != 'Q')
		
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		
		if (orders.getRecordCount() > 0)
		{
		
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantites(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//END OF if
		
		displayFarewellMessage();
		
		input.close(); //Closes scanner
	}//END OF main
	
	
	//Voids
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to Garrett's Sod Emporium!!");
		System.out.println("please use the menus below to");
		System.out.println("make your selection, Thank You!");
		System.out.println("Win one of three prizes!");
		System.out.println();
	}//END OF displayWelcomeBanner
	
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you for shopping at Garrett's Sod Emporium!");
		System.out.println("We hope to see you again");
		System.out.println("Don't forget about our prize giveaway!");
	}//END OF displayFarewellMessage
	
	public static void displayInventoryLoaded()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("INVENTORY LOADED REPORT");
		System.out.println("Inventory in-stock counts have been processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayInventoryLoaded
	
	public static void displayOutOfStock()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayInventoryLoaded
	
	public static void displayAccountResults()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayAccountResults
	
	public static void displayLoginError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}
	
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%-31s%5s%-15s\n", "Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayAccountResults
	
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Main Menu");
		
		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.println(MENU_CHARS[localIndex] + " for " + MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END OF while (localIndex < MENU_OPTIONS.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		
	}//END OF displayMainMenu
	
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.println(FILE_MENU_CHARS[localIndex] + " for " + FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END OF while (localIndex < FILE_MENU_OPTIONS.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		
	}//END OF displayFileMenu
	
	public static void displayItemMenu(String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		int localIndex = 0;
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Item Menu");
		
		while (localIndex < borrowedItemNames.length)
		{
			System.out.printf("%-2c%-4s%-18s%1s%6.2f\n", SUB_MENU_CHARS[localIndex], "for", borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex]); //5 columns
			localIndex++;
		}//END OF while (localIndex < borrowedItemNames.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayItemMenu
	
	public static String getFileName(Scanner borrowedInput)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-51s\n", "Enter the file name with extension (i.e. file.txt):");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		return borrowedInput.next();
	}//END OF getFileName
	
	public static void displayNotFound()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayNotFound
	
	public static void displayNotOpen()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END Of displayNotOpen
	
	public static void displayFileError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayFileError
	
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%-15s\n", borrowedRecordCount, "records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayRecordReport
	
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Discount Menu");
		
		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-2c%-4s%-18s%4.1f%2s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100, "%"); //5 columns
			localIndex++;
		}//END OF while (localIndex < borrowedDiscountNames.length)
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayDiscountMenu
	
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, 
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, 
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		//Output
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-18s%-15s\n","Customer Name:", borrowedUserName);
		System.out.println();
		System.out.printf("%-18s%-15s\n","Item Name:",borrowedItemName); //2 columns
		System.out.printf("%-18s%1s%7.2f\n","Original Price:","$",borrowedItemPrice); //3 columns
		System.out.println();
		System.out.printf("%-18s%5d\n","Quantity:",borrowedHowMany); //2 columns
		System.out.println();
		System.out.printf("%-18s%1s%7.2f\n","Subtotal:","$",borrowedSubTotal); //3 columns
		System.out.printf("%-18s%7.1f%2s\n","Tax Rate:",borrowedTaxRate * 100,"%"); //3 columns
		System.out.printf("%-18s%1s%7.2f\n","Tax:","$",borrowedTax); //3 columns
		System.out.println();
		System.out.printf("%-18s%1s%7.2f\n","Order Total:","$",borrowedTotalCost); //3 columns
		System.out.println();
		System.out.printf("%-18s%-15s\n","Prize:",borrowedPrizeName); //2 columns
		System.out.println();
		System.out.printf("%-19s%-2d%-2s%-16s\n","Buy more now: Only ", borrowedInStockCounts, borrowedItemName, "s left in-stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayOrderReport
	
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, 
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, 
			double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, 
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		//Output
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-18s%-15s\n","Customer Name:", borrowedUserName);
		System.out.println();
		System.out.printf("%-18s%-15s\n","Item Name:",borrowedItemName); //2 columns
		System.out.printf("%-18s%1s%7.2f\n","Original Price:","$",borrowedItemPrice); //3 columns
		System.out.println();
		System.out.printf("%-18s%-15s\n","Discount Name:",borrowedDiscountName); //2 columns
		System.out.printf("%-18s%7.1f%2s\n","Discount Rate:",borrowedDiscountRate * 100,"%"); //3 columns
		System.out.printf("%-18s%1s%7.2f\n","Discount Amount:","$",borrowedDiscountAmt); //3 columns
		System.out.printf("%-18s%1s%7.2f\n","Discounted Price:","$",borrowedDiscountPrice); //3 columns
		System.out.println();
		System.out.printf("%-18s%5d\n","Quantity:",borrowedHowMany); //2 columns
		System.out.println();
		System.out.printf("%-18s%1s%7.2f\n","Subtotal:","$",borrowedSubTotal); //3 columns
		System.out.printf("%-18s%7.1f%2s\n","Tax Rate:",borrowedTaxRate * 100,"%"); //3 columns
		System.out.printf("%-18s%1s%7.2f\n","Tax:","$",borrowedTax); //3 columns
		System.out.println();
		System.out.printf("%-18s%1s%7.2f\n","Order Total:","$",borrowedTotalCost); //3 columns
		System.out.println();
		System.out.printf("%-18s%-15s\n","Prize:",borrowedPrizeName); //2 columns
		System.out.println();
		System.out.printf("%-19s%-2d%-2s%-16s\n","Buy more now: Only ", borrowedInStockCounts, borrowedItemName, "s left in-stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayOrderReport
	
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedQuantities, double[] borrowedOrderTotals, int borrowedRecordCounts, double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println();
		System.out.println();
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-6s%-23s%-10s%-6s%-10s\n", "ID", "NAME", "Price", "QTY", "TOTAL");
		while (localIndex < borrowedRecordCounts)
		{
			System.out.printf("%-6d%-23s%-2s%-8.2f%-6d%-2s%-8.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedQuantities[localIndex],"$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//END OF while (localIndex < MENU_OPTIONS.length)
		System.out.println();
		System.out.println("GRAND TOTAL");
		System.out.printf("%-3s%-8.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//END OF displayFinalReport
	
	//VRS
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your password:");
		localPassword = borrowedInput.next();
		return localPassword;
		
	}//END OF getPassword
	
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//END OF getUserName
	
	public static char validateMainSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();
		
		System.out.println("Please enter item selection:");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//While loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			displayMainMenu();
			
			System.out.println("Error: unexpected value");
			System.out.println("Please re-enter menu selection:");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while (localSelection != 'A' && localSelection != 'Q')
		return localSelection;
	}//END OF validateMainMenu
	
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayFileMenu();
		
		System.out.println("Please enter file selection:");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//While loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			displayFileMenu();
			
			System.out.println("Error: unexpected value");
			System.out.println("Please re-enter file menu selection:");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while (localSelection != 'A' && localSelection != 'R')
		return localSelection;
	}//END OF validateFileSelection
	
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		
		System.out.println("Please enter the quantity of the item:");
		localHowMany = borrowedInput.nextInt();
		
		//While loop
		while (localHowMany <= 0)
		{
			System.out.println("Error: unexpected value");
			System.out.println("Please re-enter item quantity:");
			localHowMany = borrowedInput.nextInt();
		}//END OF while (localHowMany <= 0)
		return String.valueOf(localHowMany);
	}//END OF validateHowMany
	
	public static char validateItemMenu(Scanner borrowedInput, String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		char localSelection = ' ';
		
		displayItemMenu(borrowedItemNames, borrowedItemPrices);
		
		System.out.println("Please enter item selection:");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//While loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'D')
		{
			displayItemMenu(borrowedItemNames, borrowedItemPrices);
			
			System.out.println("Error: unexpected value");
			System.out.println("Please re-enter item menu selection:");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'D')
		return localSelection;
	}//END OF validateItemMenu
	
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		
		System.out.println("Please enter item selection:");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		//While loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		{
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			
			System.out.println("Error: unexpected value");
			System.out.println("Please re-enter  discount menu selection:");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C')
		return localSelection;
	}//END OF validateDiscountMenu
	
	public static int validateSearchValue(Scanner borrowedInput)
	{

		int localSearch = 0;
		
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Enter the search value:");
		localSearch = borrowedInput.nextInt();
		
		//While loop
		while (localSearch <= 0)
		{
			System.out.println("Error: unexpected value");
			System.out.println("Please re-enter search value:");
			localSearch = borrowedInput.nextInt();
		}//END OF while (localHowMany <= 0)
		return localSearch;
	}
	
}//END OF main class
